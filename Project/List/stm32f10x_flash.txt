; generated by ARM C/C++ Compiler, 5.02 [Build 28]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\Obj\stm32f10x_flash.o --asm_dir=.\List\ --list_dir=.\List\ --depend=.\Obj\stm32f10x_flash.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\Libraries\CMSIS\CM3\CoreSupport -I..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\Libraries\STM32F10x_StdPeriph_Driver\src -I..\User -I..\BaseDrive -Id:\Keil\ARM\RV31\INC -Id:\Keil\ARM\CMSIS\Include -Id:\Keil\ARM\Inc\ST\STM32F10x -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER --omf_browse=.\Obj\stm32f10x_flash.crf ..\Libraries\STM32F10x_StdPeriph_Driver\src\stm32f10x_flash.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  FLASH_SetLatency PROC
;;;253      */
;;;254    void FLASH_SetLatency(uint32_t FLASH_Latency)
000000  4601              MOV      r1,r0
;;;255    {
;;;256      uint32_t tmpreg = 0;
000002  2000              MOVS     r0,#0
;;;257      
;;;258      /* Check the parameters */
;;;259      assert_param(IS_FLASH_LATENCY(FLASH_Latency));
;;;260      
;;;261      /* Read the ACR register */
;;;262      tmpreg = FLASH->ACR;  
000004  4afe              LDR      r2,|L1.1024|
000006  6810              LDR      r0,[r2,#0]
;;;263      
;;;264      /* Sets the Latency value */
;;;265      tmpreg &= ACR_LATENCY_Mask;
000008  f0000038          AND      r0,r0,#0x38
;;;266      tmpreg |= FLASH_Latency;
00000c  4308              ORRS     r0,r0,r1
;;;267      
;;;268      /* Write the ACR register */
;;;269      FLASH->ACR = tmpreg;
00000e  6010              STR      r0,[r2,#0]
;;;270    }
000010  4770              BX       lr
;;;271    
                          ENDP

                  FLASH_HalfCycleAccessCmd PROC
;;;280      */
;;;281    void FLASH_HalfCycleAccessCmd(uint32_t FLASH_HalfCycleAccess)
000012  49fb              LDR      r1,|L1.1024|
;;;282    {
;;;283      /* Check the parameters */
;;;284      assert_param(IS_FLASH_HALFCYCLEACCESS_STATE(FLASH_HalfCycleAccess));
;;;285      
;;;286      /* Enable or disable the Half cycle access */
;;;287      FLASH->ACR &= ACR_HLFCYA_Mask;
000014  6809              LDR      r1,[r1,#0]
000016  f0210108          BIC      r1,r1,#8
00001a  4af9              LDR      r2,|L1.1024|
00001c  6011              STR      r1,[r2,#0]
;;;288      FLASH->ACR |= FLASH_HalfCycleAccess;
00001e  4611              MOV      r1,r2
000020  6809              LDR      r1,[r1,#0]
000022  4301              ORRS     r1,r1,r0
000024  6011              STR      r1,[r2,#0]
;;;289    }
000026  4770              BX       lr
;;;290    
                          ENDP

                  FLASH_PrefetchBufferCmd PROC
;;;299      */
;;;300    void FLASH_PrefetchBufferCmd(uint32_t FLASH_PrefetchBuffer)
000028  49f5              LDR      r1,|L1.1024|
;;;301    {
;;;302      /* Check the parameters */
;;;303      assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
;;;304      
;;;305      /* Enable or disable the Prefetch Buffer */
;;;306      FLASH->ACR &= ACR_PRFTBE_Mask;
00002a  6809              LDR      r1,[r1,#0]
00002c  f0210110          BIC      r1,r1,#0x10
000030  4af3              LDR      r2,|L1.1024|
000032  6011              STR      r1,[r2,#0]
;;;307      FLASH->ACR |= FLASH_PrefetchBuffer;
000034  4611              MOV      r1,r2
000036  6809              LDR      r1,[r1,#0]
000038  4301              ORRS     r1,r1,r0
00003a  6011              STR      r1,[r2,#0]
;;;308    }
00003c  4770              BX       lr
;;;309    
                          ENDP

                  FLASH_Unlock PROC
;;;318      */
;;;319    void FLASH_Unlock(void)
00003e  48f1              LDR      r0,|L1.1028|
;;;320    {
;;;321      /* Authorize the FPEC of Bank1 Access */
;;;322      FLASH->KEYR = FLASH_KEY1;
000040  49ef              LDR      r1,|L1.1024|
000042  6048              STR      r0,[r1,#4]
;;;323      FLASH->KEYR = FLASH_KEY2;
000044  48f0              LDR      r0,|L1.1032|
000046  6048              STR      r0,[r1,#4]
;;;324    
;;;325    #ifdef STM32F10X_XL
;;;326      /* Authorize the FPEC of Bank2 Access */
;;;327      FLASH->KEYR2 = FLASH_KEY1;
;;;328      FLASH->KEYR2 = FLASH_KEY2;
;;;329    #endif /* STM32F10X_XL */
;;;330    }
000048  4770              BX       lr
;;;331    /**
                          ENDP

                  FLASH_UnlockBank1 PROC
;;;339      */
;;;340    void FLASH_UnlockBank1(void)
00004a  48ee              LDR      r0,|L1.1028|
;;;341    {
;;;342      /* Authorize the FPEC of Bank1 Access */
;;;343      FLASH->KEYR = FLASH_KEY1;
00004c  49ec              LDR      r1,|L1.1024|
00004e  6048              STR      r0,[r1,#4]
;;;344      FLASH->KEYR = FLASH_KEY2;
000050  48ed              LDR      r0,|L1.1032|
000052  6048              STR      r0,[r1,#4]
;;;345    }
000054  4770              BX       lr
;;;346    
                          ENDP

                  FLASH_Lock PROC
;;;371      */
;;;372    void FLASH_Lock(void)
000056  48ea              LDR      r0,|L1.1024|
;;;373    {
;;;374      /* Set the Lock Bit to lock the FPEC and the CR of  Bank1 */
;;;375      FLASH->CR |= CR_LOCK_Set;
000058  6900              LDR      r0,[r0,#0x10]
00005a  f0400080          ORR      r0,r0,#0x80
00005e  49e8              LDR      r1,|L1.1024|
000060  6108              STR      r0,[r1,#0x10]
;;;376    
;;;377    #ifdef STM32F10X_XL
;;;378      /* Set the Lock Bit to lock the FPEC and the CR of  Bank2 */
;;;379      FLASH->CR2 |= CR_LOCK_Set;
;;;380    #endif /* STM32F10X_XL */
;;;381    }
000062  4770              BX       lr
;;;382    
                          ENDP

                  FLASH_LockBank1 PROC
;;;391      */
;;;392    void FLASH_LockBank1(void)
000064  48e6              LDR      r0,|L1.1024|
;;;393    {
;;;394      /* Set the Lock Bit to lock the FPEC and the CR of  Bank1 */
;;;395      FLASH->CR |= CR_LOCK_Set;
000066  6900              LDR      r0,[r0,#0x10]
000068  f0400080          ORR      r0,r0,#0x80
00006c  49e4              LDR      r1,|L1.1024|
00006e  6108              STR      r0,[r1,#0x10]
;;;396    }
000070  4770              BX       lr
;;;397    
                          ENDP

                  FLASH_GetBank1Status PROC
;;;1514     */
;;;1515   FLASH_Status FLASH_GetBank1Status(void)
000072  2004              MOVS     r0,#4
;;;1516   {
;;;1517     FLASH_Status flashstatus = FLASH_COMPLETE;
;;;1518     
;;;1519     if((FLASH->SR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY) 
000074  49e2              LDR      r1,|L1.1024|
000076  68c9              LDR      r1,[r1,#0xc]
000078  f0110f01          TST      r1,#1
00007c  d001              BEQ      |L1.130|
;;;1520     {
;;;1521       flashstatus = FLASH_BUSY;
00007e  2001              MOVS     r0,#1
000080  e00e              B        |L1.160|
                  |L1.130|
;;;1522     }
;;;1523     else 
;;;1524     {  
;;;1525       if((FLASH->SR & FLASH_FLAG_BANK1_PGERR) != 0)
000082  49df              LDR      r1,|L1.1024|
000084  68c9              LDR      r1,[r1,#0xc]
000086  f0110f04          TST      r1,#4
00008a  d001              BEQ      |L1.144|
;;;1526       { 
;;;1527         flashstatus = FLASH_ERROR_PG;
00008c  2002              MOVS     r0,#2
00008e  e007              B        |L1.160|
                  |L1.144|
;;;1528       }
;;;1529       else 
;;;1530       {
;;;1531         if((FLASH->SR & FLASH_FLAG_BANK1_WRPRTERR) != 0 )
000090  49db              LDR      r1,|L1.1024|
000092  68c9              LDR      r1,[r1,#0xc]
000094  f0110f10          TST      r1,#0x10
000098  d001              BEQ      |L1.158|
;;;1532         {
;;;1533           flashstatus = FLASH_ERROR_WRP;
00009a  2003              MOVS     r0,#3
00009c  e000              B        |L1.160|
                  |L1.158|
;;;1534         }
;;;1535         else
;;;1536         {
;;;1537           flashstatus = FLASH_COMPLETE;
00009e  2004              MOVS     r0,#4
                  |L1.160|
;;;1538         }
;;;1539       }
;;;1540     }
;;;1541     /* Return the Flash Status */
;;;1542     return flashstatus;
;;;1543   }
0000a0  4770              BX       lr
;;;1544   
                          ENDP

                  FLASH_WaitForLastOperation PROC
;;;1594     */
;;;1595   FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
0000a2  b500              PUSH     {lr}
;;;1596   { 
0000a4  4602              MOV      r2,r0
;;;1597     FLASH_Status status = FLASH_COMPLETE;
0000a6  2304              MOVS     r3,#4
;;;1598      
;;;1599     /* Check for the Flash Status */
;;;1600     status = FLASH_GetBank1Status();
0000a8  f7fffffe          BL       FLASH_GetBank1Status
0000ac  4603              MOV      r3,r0
;;;1601     /* Wait for a Flash operation to complete or a TIMEOUT to occur */
;;;1602     while((status == FLASH_BUSY) && (Timeout != 0x00))
0000ae  e003              B        |L1.184|
                  |L1.176|
;;;1603     {
;;;1604       status = FLASH_GetBank1Status();
0000b0  f7fffffe          BL       FLASH_GetBank1Status
0000b4  4603              MOV      r3,r0
;;;1605       Timeout--;
0000b6  1e52              SUBS     r2,r2,#1
                  |L1.184|
0000b8  2b01              CMP      r3,#1                 ;1602
0000ba  d101              BNE      |L1.192|
0000bc  2a00              CMP      r2,#0                 ;1602
0000be  d1f7              BNE      |L1.176|
                  |L1.192|
;;;1606     }
;;;1607     if(Timeout == 0x00 )
0000c0  b902              CBNZ     r2,|L1.196|
;;;1608     {
;;;1609       status = FLASH_TIMEOUT;
0000c2  2305              MOVS     r3,#5
                  |L1.196|
;;;1610     }
;;;1611     /* Return the operation status */
;;;1612     return status;
0000c4  4618              MOV      r0,r3
;;;1613   }
0000c6  bd00              POP      {pc}
;;;1614   
                          ENDP

                  FLASH_ErasePage PROC
;;;418      */
;;;419    FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
0000c8  b530              PUSH     {r4,r5,lr}
;;;420    {
0000ca  4604              MOV      r4,r0
;;;421      FLASH_Status status = FLASH_COMPLETE;
0000cc  2504              MOVS     r5,#4
;;;422      /* Check the parameters */
;;;423      assert_param(IS_FLASH_ADDRESS(Page_Address));
;;;424    
;;;425    #ifdef STM32F10X_XL
;;;426      if(Page_Address < FLASH_BANK1_END_ADDRESS)  
;;;427      {
;;;428        /* Wait for last operation to be completed */
;;;429        status = FLASH_WaitForLastBank1Operation(EraseTimeout);
;;;430        if(status == FLASH_COMPLETE)
;;;431        { 
;;;432          /* if the previous operation is completed, proceed to erase the page */
;;;433          FLASH->CR|= CR_PER_Set;
;;;434          FLASH->AR = Page_Address; 
;;;435          FLASH->CR|= CR_STRT_Set;
;;;436        
;;;437          /* Wait for last operation to be completed */
;;;438          status = FLASH_WaitForLastBank1Operation(EraseTimeout);
;;;439    
;;;440          /* Disable the PER Bit */
;;;441          FLASH->CR &= CR_PER_Reset;
;;;442        }
;;;443      }
;;;444      else
;;;445      {
;;;446        /* Wait for last operation to be completed */
;;;447        status = FLASH_WaitForLastBank2Operation(EraseTimeout);
;;;448        if(status == FLASH_COMPLETE)
;;;449        { 
;;;450          /* if the previous operation is completed, proceed to erase the page */
;;;451          FLASH->CR2|= CR_PER_Set;
;;;452          FLASH->AR2 = Page_Address; 
;;;453          FLASH->CR2|= CR_STRT_Set;
;;;454        
;;;455          /* Wait for last operation to be completed */
;;;456          status = FLASH_WaitForLastBank2Operation(EraseTimeout);
;;;457          
;;;458          /* Disable the PER Bit */
;;;459          FLASH->CR2 &= CR_PER_Reset;
;;;460        }
;;;461      }
;;;462    #else
;;;463      /* Wait for last operation to be completed */
;;;464      status = FLASH_WaitForLastOperation(EraseTimeout);
0000ce  f44f2030          MOV      r0,#0xb0000
0000d2  f7fffffe          BL       FLASH_WaitForLastOperation
0000d6  4605              MOV      r5,r0
;;;465      
;;;466      if(status == FLASH_COMPLETE)
0000d8  2d04              CMP      r5,#4
0000da  d117              BNE      |L1.268|
;;;467      { 
;;;468        /* if the previous operation is completed, proceed to erase the page */
;;;469        FLASH->CR|= CR_PER_Set;
0000dc  48c8              LDR      r0,|L1.1024|
0000de  6900              LDR      r0,[r0,#0x10]
0000e0  f0400002          ORR      r0,r0,#2
0000e4  49c6              LDR      r1,|L1.1024|
0000e6  6108              STR      r0,[r1,#0x10]
;;;470        FLASH->AR = Page_Address; 
0000e8  4608              MOV      r0,r1
0000ea  6144              STR      r4,[r0,#0x14]
;;;471        FLASH->CR|= CR_STRT_Set;
0000ec  6900              LDR      r0,[r0,#0x10]
0000ee  f0400040          ORR      r0,r0,#0x40
0000f2  6108              STR      r0,[r1,#0x10]
;;;472        
;;;473        /* Wait for last operation to be completed */
;;;474        status = FLASH_WaitForLastOperation(EraseTimeout);
0000f4  f44f2030          MOV      r0,#0xb0000
0000f8  f7fffffe          BL       FLASH_WaitForLastOperation
0000fc  4605              MOV      r5,r0
;;;475        
;;;476        /* Disable the PER Bit */
;;;477        FLASH->CR &= CR_PER_Reset;
0000fe  48c0              LDR      r0,|L1.1024|
000100  6900              LDR      r0,[r0,#0x10]
000102  f64171fd          MOV      r1,#0x1ffd
000106  4008              ANDS     r0,r0,r1
000108  49bd              LDR      r1,|L1.1024|
00010a  6108              STR      r0,[r1,#0x10]
                  |L1.268|
;;;478      }
;;;479    #endif /* STM32F10X_XL */
;;;480    
;;;481      /* Return the Erase Status */
;;;482      return status;
00010c  4628              MOV      r0,r5
;;;483    }
00010e  bd30              POP      {r4,r5,pc}
;;;484    
                          ENDP

                  FLASH_EraseAllPages PROC
;;;491      */
;;;492    FLASH_Status FLASH_EraseAllPages(void)
000110  b510              PUSH     {r4,lr}
;;;493    {
;;;494      FLASH_Status status = FLASH_COMPLETE;
000112  2404              MOVS     r4,#4
;;;495    
;;;496    #ifdef STM32F10X_XL
;;;497      /* Wait for last operation to be completed */
;;;498      status = FLASH_WaitForLastBank1Operation(EraseTimeout);
;;;499      
;;;500      if(status == FLASH_COMPLETE)
;;;501      {
;;;502        /* if the previous operation is completed, proceed to erase all pages */
;;;503         FLASH->CR |= CR_MER_Set;
;;;504         FLASH->CR |= CR_STRT_Set;
;;;505        
;;;506        /* Wait for last operation to be completed */
;;;507        status = FLASH_WaitForLastBank1Operation(EraseTimeout);
;;;508        
;;;509        /* Disable the MER Bit */
;;;510        FLASH->CR &= CR_MER_Reset;
;;;511      }    
;;;512      if(status == FLASH_COMPLETE)
;;;513      {
;;;514        /* if the previous operation is completed, proceed to erase all pages */
;;;515         FLASH->CR2 |= CR_MER_Set;
;;;516         FLASH->CR2 |= CR_STRT_Set;
;;;517        
;;;518        /* Wait for last operation to be completed */
;;;519        status = FLASH_WaitForLastBank2Operation(EraseTimeout);
;;;520        
;;;521        /* Disable the MER Bit */
;;;522        FLASH->CR2 &= CR_MER_Reset;
;;;523      }
;;;524    #else
;;;525      /* Wait for last operation to be completed */
;;;526      status = FLASH_WaitForLastOperation(EraseTimeout);
000114  f44f2030          MOV      r0,#0xb0000
000118  f7fffffe          BL       FLASH_WaitForLastOperation
00011c  4604              MOV      r4,r0
;;;527      if(status == FLASH_COMPLETE)
00011e  2c04              CMP      r4,#4
000120  d116              BNE      |L1.336|
;;;528      {
;;;529        /* if the previous operation is completed, proceed to erase all pages */
;;;530         FLASH->CR |= CR_MER_Set;
000122  48b7              LDR      r0,|L1.1024|
000124  6900              LDR      r0,[r0,#0x10]
000126  f0400004          ORR      r0,r0,#4
00012a  49b5              LDR      r1,|L1.1024|
00012c  6108              STR      r0,[r1,#0x10]
;;;531         FLASH->CR |= CR_STRT_Set;
00012e  4608              MOV      r0,r1
000130  6900              LDR      r0,[r0,#0x10]
000132  f0400040          ORR      r0,r0,#0x40
000136  6108              STR      r0,[r1,#0x10]
;;;532        
;;;533        /* Wait for last operation to be completed */
;;;534        status = FLASH_WaitForLastOperation(EraseTimeout);
000138  f44f2030          MOV      r0,#0xb0000
00013c  f7fffffe          BL       FLASH_WaitForLastOperation
000140  4604              MOV      r4,r0
;;;535    
;;;536        /* Disable the MER Bit */
;;;537        FLASH->CR &= CR_MER_Reset;
000142  48af              LDR      r0,|L1.1024|
000144  6900              LDR      r0,[r0,#0x10]
000146  f64171fb          MOV      r1,#0x1ffb
00014a  4008              ANDS     r0,r0,r1
00014c  49ac              LDR      r1,|L1.1024|
00014e  6108              STR      r0,[r1,#0x10]
                  |L1.336|
;;;538      }
;;;539    #endif /* STM32F10X_XL */
;;;540    
;;;541      /* Return the Erase Status */
;;;542      return status;
000150  4620              MOV      r0,r4
;;;543    }
000152  bd10              POP      {r4,pc}
;;;544    
                          ENDP

                  FLASH_WaitForLastBank1Operation PROC
;;;1622     */
;;;1623   FLASH_Status FLASH_WaitForLastBank1Operation(uint32_t Timeout)
000154  b500              PUSH     {lr}
;;;1624   { 
000156  4602              MOV      r2,r0
;;;1625     FLASH_Status status = FLASH_COMPLETE;
000158  2304              MOVS     r3,#4
;;;1626      
;;;1627     /* Check for the Flash Status */
;;;1628     status = FLASH_GetBank1Status();
00015a  f7fffffe          BL       FLASH_GetBank1Status
00015e  4603              MOV      r3,r0
;;;1629     /* Wait for a Flash operation to complete or a TIMEOUT to occur */
;;;1630     while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
000160  e003              B        |L1.362|
                  |L1.354|
;;;1631     {
;;;1632       status = FLASH_GetBank1Status();
000162  f7fffffe          BL       FLASH_GetBank1Status
000166  4603              MOV      r3,r0
;;;1633       Timeout--;
000168  1e52              SUBS     r2,r2,#1
                  |L1.362|
00016a  2b01              CMP      r3,#1                 ;1630
00016c  d101              BNE      |L1.370|
00016e  2a00              CMP      r2,#0                 ;1630
000170  d1f7              BNE      |L1.354|
                  |L1.370|
;;;1634     }
;;;1635     if(Timeout == 0x00 )
000172  b902              CBNZ     r2,|L1.374|
;;;1636     {
;;;1637       status = FLASH_TIMEOUT;
000174  2305              MOVS     r3,#5
                  |L1.374|
;;;1638     }
;;;1639     /* Return the operation status */
;;;1640     return status;
000176  4618              MOV      r0,r3
;;;1641   }
000178  bd00              POP      {pc}
;;;1642   
                          ENDP

                  FLASH_EraseAllBank1Pages PROC
;;;554      */
;;;555    FLASH_Status FLASH_EraseAllBank1Pages(void)
00017a  b510              PUSH     {r4,lr}
;;;556    {
;;;557      FLASH_Status status = FLASH_COMPLETE;
00017c  2404              MOVS     r4,#4
;;;558      /* Wait for last operation to be completed */
;;;559      status = FLASH_WaitForLastBank1Operation(EraseTimeout);
00017e  f44f2030          MOV      r0,#0xb0000
000182  f7fffffe          BL       FLASH_WaitForLastBank1Operation
000186  4604              MOV      r4,r0
;;;560      
;;;561      if(status == FLASH_COMPLETE)
000188  2c04              CMP      r4,#4
00018a  d116              BNE      |L1.442|
;;;562      {
;;;563        /* if the previous operation is completed, proceed to erase all pages */
;;;564         FLASH->CR |= CR_MER_Set;
00018c  489c              LDR      r0,|L1.1024|
00018e  6900              LDR      r0,[r0,#0x10]
000190  f0400004          ORR      r0,r0,#4
000194  499a              LDR      r1,|L1.1024|
000196  6108              STR      r0,[r1,#0x10]
;;;565         FLASH->CR |= CR_STRT_Set;
000198  4608              MOV      r0,r1
00019a  6900              LDR      r0,[r0,#0x10]
00019c  f0400040          ORR      r0,r0,#0x40
0001a0  6108              STR      r0,[r1,#0x10]
;;;566        
;;;567        /* Wait for last operation to be completed */
;;;568        status = FLASH_WaitForLastBank1Operation(EraseTimeout);
0001a2  f44f2030          MOV      r0,#0xb0000
0001a6  f7fffffe          BL       FLASH_WaitForLastBank1Operation
0001aa  4604              MOV      r4,r0
;;;569        
;;;570        /* Disable the MER Bit */
;;;571        FLASH->CR &= CR_MER_Reset;
0001ac  4894              LDR      r0,|L1.1024|
0001ae  6900              LDR      r0,[r0,#0x10]
0001b0  f64171fb          MOV      r1,#0x1ffb
0001b4  4008              ANDS     r0,r0,r1
0001b6  4992              LDR      r1,|L1.1024|
0001b8  6108              STR      r0,[r1,#0x10]
                  |L1.442|
;;;572      }    
;;;573      /* Return the Erase Status */
;;;574      return status;
0001ba  4620              MOV      r0,r4
;;;575    }
0001bc  bd10              POP      {r4,pc}
;;;576    
                          ENDP

                  FLASH_GetReadOutProtectionStatus PROC
;;;1239     */
;;;1240   FlagStatus FLASH_GetReadOutProtectionStatus(void)
0001be  2000              MOVS     r0,#0
;;;1241   {
;;;1242     FlagStatus readoutstatus = RESET;
;;;1243     if ((FLASH->OBR & RDPRT_Mask) != (uint32_t)RESET)
0001c0  498f              LDR      r1,|L1.1024|
0001c2  69c9              LDR      r1,[r1,#0x1c]
0001c4  f0110f02          TST      r1,#2
0001c8  d001              BEQ      |L1.462|
;;;1244     {
;;;1245       readoutstatus = SET;
0001ca  2001              MOVS     r0,#1
0001cc  e000              B        |L1.464|
                  |L1.462|
;;;1246     }
;;;1247     else
;;;1248     {
;;;1249       readoutstatus = RESET;
0001ce  2000              MOVS     r0,#0
                  |L1.464|
;;;1250     }
;;;1251     return readoutstatus;
;;;1252   }
0001d0  4770              BX       lr
;;;1253   
                          ENDP

                  FLASH_EraseOptionBytes PROC
;;;615      */
;;;616    FLASH_Status FLASH_EraseOptionBytes(void)
0001d2  b530              PUSH     {r4,r5,lr}
;;;617    {
;;;618      uint16_t rdptmp = RDP_Key;
0001d4  25a5              MOVS     r5,#0xa5
;;;619    
;;;620      FLASH_Status status = FLASH_COMPLETE;
0001d6  2404              MOVS     r4,#4
;;;621    
;;;622      /* Get the actual read protection Option Byte value */ 
;;;623      if(FLASH_GetReadOutProtectionStatus() != RESET)
0001d8  f7fffffe          BL       FLASH_GetReadOutProtectionStatus
0001dc  b100              CBZ      r0,|L1.480|
;;;624      {
;;;625        rdptmp = 0x00;  
0001de  2500              MOVS     r5,#0
                  |L1.480|
;;;626      }
;;;627    
;;;628      /* Wait for last operation to be completed */
;;;629      status = FLASH_WaitForLastOperation(EraseTimeout);
0001e0  f44f2030          MOV      r0,#0xb0000
0001e4  f7fffffe          BL       FLASH_WaitForLastOperation
0001e8  4604              MOV      r4,r0
;;;630      if(status == FLASH_COMPLETE)
0001ea  2c04              CMP      r4,#4
0001ec  d13a              BNE      |L1.612|
;;;631      {
;;;632        /* Authorize the small information block programming */
;;;633        FLASH->OPTKEYR = FLASH_KEY1;
0001ee  4885              LDR      r0,|L1.1028|
0001f0  4983              LDR      r1,|L1.1024|
0001f2  6088              STR      r0,[r1,#8]
;;;634        FLASH->OPTKEYR = FLASH_KEY2;
0001f4  4884              LDR      r0,|L1.1032|
0001f6  6088              STR      r0,[r1,#8]
;;;635        
;;;636        /* if the previous operation is completed, proceed to erase the option bytes */
;;;637        FLASH->CR |= CR_OPTER_Set;
0001f8  4608              MOV      r0,r1
0001fa  6900              LDR      r0,[r0,#0x10]
0001fc  f0400020          ORR      r0,r0,#0x20
000200  6108              STR      r0,[r1,#0x10]
;;;638        FLASH->CR |= CR_STRT_Set;
000202  4608              MOV      r0,r1
000204  6900              LDR      r0,[r0,#0x10]
000206  f0400040          ORR      r0,r0,#0x40
00020a  6108              STR      r0,[r1,#0x10]
;;;639        /* Wait for last operation to be completed */
;;;640        status = FLASH_WaitForLastOperation(EraseTimeout);
00020c  f44f2030          MOV      r0,#0xb0000
000210  f7fffffe          BL       FLASH_WaitForLastOperation
000214  4604              MOV      r4,r0
;;;641        
;;;642        if(status == FLASH_COMPLETE)
000216  2c04              CMP      r4,#4
000218  d11b              BNE      |L1.594|
;;;643        {
;;;644          /* if the erase operation is completed, disable the OPTER Bit */
;;;645          FLASH->CR &= CR_OPTER_Reset;
00021a  4879              LDR      r0,|L1.1024|
00021c  6900              LDR      r0,[r0,#0x10]
00021e  f64171df          MOV      r1,#0x1fdf
000222  4008              ANDS     r0,r0,r1
000224  4976              LDR      r1,|L1.1024|
000226  6108              STR      r0,[r1,#0x10]
;;;646           
;;;647          /* Enable the Option Bytes Programming operation */
;;;648          FLASH->CR |= CR_OPTPG_Set;
000228  4608              MOV      r0,r1
00022a  6900              LDR      r0,[r0,#0x10]
00022c  f0400010          ORR      r0,r0,#0x10
000230  6108              STR      r0,[r1,#0x10]
;;;649          /* Restore the last read protection Option Byte value */
;;;650          OB->RDP = (uint16_t)rdptmp; 
000232  4876              LDR      r0,|L1.1036|
000234  8005              STRH     r5,[r0,#0]
;;;651          /* Wait for last operation to be completed */
;;;652          status = FLASH_WaitForLastOperation(ProgramTimeout);
000236  02e0              LSLS     r0,r4,#11
000238  f7fffffe          BL       FLASH_WaitForLastOperation
00023c  4604              MOV      r4,r0
;;;653     
;;;654          if(status != FLASH_TIMEOUT)
00023e  2c05              CMP      r4,#5
000240  d010              BEQ      |L1.612|
;;;655          {
;;;656            /* if the program operation is completed, disable the OPTPG Bit */
;;;657            FLASH->CR &= CR_OPTPG_Reset;
000242  486f              LDR      r0,|L1.1024|
000244  6900              LDR      r0,[r0,#0x10]
000246  f64171ef          MOV      r1,#0x1fef
00024a  4008              ANDS     r0,r0,r1
00024c  496c              LDR      r1,|L1.1024|
00024e  6108              STR      r0,[r1,#0x10]
000250  e008              B        |L1.612|
                  |L1.594|
;;;658          }
;;;659        }
;;;660        else
;;;661        {
;;;662          if (status != FLASH_TIMEOUT)
000252  2c05              CMP      r4,#5
000254  d006              BEQ      |L1.612|
;;;663          {
;;;664            /* Disable the OPTPG Bit */
;;;665            FLASH->CR &= CR_OPTPG_Reset;
000256  486a              LDR      r0,|L1.1024|
000258  6900              LDR      r0,[r0,#0x10]
00025a  f64171ef          MOV      r1,#0x1fef
00025e  4008              ANDS     r0,r0,r1
000260  4967              LDR      r1,|L1.1024|
000262  6108              STR      r0,[r1,#0x10]
                  |L1.612|
;;;666          }
;;;667        }  
;;;668      }
;;;669      /* Return the erase status */
;;;670      return status;
000264  4620              MOV      r0,r4
;;;671    }
000266  bd30              POP      {r4,r5,pc}
;;;672    
                          ENDP

                  FLASH_ProgramWord PROC
;;;680      */
;;;681    FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
000268  b5f0              PUSH     {r4-r7,lr}
;;;682    {
00026a  4604              MOV      r4,r0
00026c  460d              MOV      r5,r1
;;;683      FLASH_Status status = FLASH_COMPLETE;
00026e  2604              MOVS     r6,#4
;;;684      __IO uint32_t tmp = 0;
000270  2700              MOVS     r7,#0
;;;685    
;;;686      /* Check the parameters */
;;;687      assert_param(IS_FLASH_ADDRESS(Address));
;;;688    
;;;689    #ifdef STM32F10X_XL
;;;690      if(Address < FLASH_BANK1_END_ADDRESS - 2)
;;;691      { 
;;;692        /* Wait for last operation to be completed */
;;;693        status = FLASH_WaitForLastBank1Operation(ProgramTimeout); 
;;;694        if(status == FLASH_COMPLETE)
;;;695        {
;;;696          /* if the previous operation is completed, proceed to program the new first 
;;;697            half word */
;;;698          FLASH->CR |= CR_PG_Set;
;;;699      
;;;700          *(__IO uint16_t*)Address = (uint16_t)Data;
;;;701          /* Wait for last operation to be completed */
;;;702          status = FLASH_WaitForLastOperation(ProgramTimeout);
;;;703     
;;;704          if(status == FLASH_COMPLETE)
;;;705          {
;;;706            /* if the previous operation is completed, proceed to program the new second 
;;;707            half word */
;;;708            tmp = Address + 2;
;;;709    
;;;710            *(__IO uint16_t*) tmp = Data >> 16;
;;;711        
;;;712            /* Wait for last operation to be completed */
;;;713            status = FLASH_WaitForLastOperation(ProgramTimeout);
;;;714            
;;;715            /* Disable the PG Bit */
;;;716            FLASH->CR &= CR_PG_Reset;
;;;717          }
;;;718          else
;;;719          {
;;;720            /* Disable the PG Bit */
;;;721            FLASH->CR &= CR_PG_Reset;
;;;722           }
;;;723        }
;;;724      }
;;;725      else if(Address == (FLASH_BANK1_END_ADDRESS - 1))
;;;726      {
;;;727        /* Wait for last operation to be completed */
;;;728        status = FLASH_WaitForLastBank1Operation(ProgramTimeout);
;;;729    
;;;730        if(status == FLASH_COMPLETE)
;;;731        {
;;;732          /* if the previous operation is completed, proceed to program the new first 
;;;733            half word */
;;;734          FLASH->CR |= CR_PG_Set;
;;;735      
;;;736          *(__IO uint16_t*)Address = (uint16_t)Data;
;;;737    
;;;738          /* Wait for last operation to be completed */
;;;739          status = FLASH_WaitForLastBank1Operation(ProgramTimeout);
;;;740          
;;;741    	  /* Disable the PG Bit */
;;;742          FLASH->CR &= CR_PG_Reset;
;;;743        }
;;;744        else
;;;745        {
;;;746          /* Disable the PG Bit */
;;;747          FLASH->CR &= CR_PG_Reset;
;;;748        }
;;;749    
;;;750        /* Wait for last operation to be completed */
;;;751        status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
;;;752    
;;;753        if(status == FLASH_COMPLETE)
;;;754        {
;;;755          /* if the previous operation is completed, proceed to program the new second 
;;;756          half word */
;;;757          FLASH->CR2 |= CR_PG_Set;
;;;758          tmp = Address + 2;
;;;759    
;;;760          *(__IO uint16_t*) tmp = Data >> 16;
;;;761        
;;;762          /* Wait for last operation to be completed */
;;;763          status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
;;;764            
;;;765          /* Disable the PG Bit */
;;;766          FLASH->CR2 &= CR_PG_Reset;
;;;767        }
;;;768        else
;;;769        {
;;;770          /* Disable the PG Bit */
;;;771          FLASH->CR2 &= CR_PG_Reset;
;;;772        }
;;;773      }
;;;774      else
;;;775      {
;;;776        /* Wait for last operation to be completed */
;;;777        status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
;;;778    
;;;779        if(status == FLASH_COMPLETE)
;;;780        {
;;;781          /* if the previous operation is completed, proceed to program the new first 
;;;782            half word */
;;;783          FLASH->CR2 |= CR_PG_Set;
;;;784      
;;;785          *(__IO uint16_t*)Address = (uint16_t)Data;
;;;786          /* Wait for last operation to be completed */
;;;787          status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
;;;788     
;;;789          if(status == FLASH_COMPLETE)
;;;790          {
;;;791            /* if the previous operation is completed, proceed to program the new second 
;;;792            half word */
;;;793            tmp = Address + 2;
;;;794    
;;;795            *(__IO uint16_t*) tmp = Data >> 16;
;;;796        
;;;797            /* Wait for last operation to be completed */
;;;798            status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
;;;799            
;;;800            /* Disable the PG Bit */
;;;801            FLASH->CR2 &= CR_PG_Reset;
;;;802          }
;;;803          else
;;;804          {
;;;805            /* Disable the PG Bit */
;;;806            FLASH->CR2 &= CR_PG_Reset;
;;;807          }
;;;808        }
;;;809      }
;;;810    #else
;;;811      /* Wait for last operation to be completed */
;;;812      status = FLASH_WaitForLastOperation(ProgramTimeout);
000272  02f0              LSLS     r0,r6,#11
000274  f7fffffe          BL       FLASH_WaitForLastOperation
000278  4606              MOV      r6,r0
;;;813      
;;;814      if(status == FLASH_COMPLETE)
00027a  2e04              CMP      r6,#4
00027c  d122              BNE      |L1.708|
;;;815      {
;;;816        /* if the previous operation is completed, proceed to program the new first 
;;;817        half word */
;;;818        FLASH->CR |= CR_PG_Set;
00027e  4860              LDR      r0,|L1.1024|
000280  6900              LDR      r0,[r0,#0x10]
000282  f0400001          ORR      r0,r0,#1
000286  495e              LDR      r1,|L1.1024|
000288  6108              STR      r0,[r1,#0x10]
;;;819      
;;;820        *(__IO uint16_t*)Address = (uint16_t)Data;
00028a  8025              STRH     r5,[r4,#0]
;;;821        /* Wait for last operation to be completed */
;;;822        status = FLASH_WaitForLastOperation(ProgramTimeout);
00028c  02f0              LSLS     r0,r6,#11
00028e  f7fffffe          BL       FLASH_WaitForLastOperation
000292  4606              MOV      r6,r0
;;;823     
;;;824        if(status == FLASH_COMPLETE)
000294  2e04              CMP      r6,#4
000296  d10e              BNE      |L1.694|
;;;825        {
;;;826          /* if the previous operation is completed, proceed to program the new second 
;;;827          half word */
;;;828          tmp = Address + 2;
000298  1ca7              ADDS     r7,r4,#2
;;;829    
;;;830          *(__IO uint16_t*) tmp = Data >> 16;
00029a  0c28              LSRS     r0,r5,#16
00029c  8038              STRH     r0,[r7,#0]
;;;831        
;;;832          /* Wait for last operation to be completed */
;;;833          status = FLASH_WaitForLastOperation(ProgramTimeout);
00029e  02f0              LSLS     r0,r6,#11
0002a0  f7fffffe          BL       FLASH_WaitForLastOperation
0002a4  4606              MOV      r6,r0
;;;834            
;;;835          /* Disable the PG Bit */
;;;836          FLASH->CR &= CR_PG_Reset;
0002a6  4856              LDR      r0,|L1.1024|
0002a8  6900              LDR      r0,[r0,#0x10]
0002aa  f64171fe          MOV      r1,#0x1ffe
0002ae  4008              ANDS     r0,r0,r1
0002b0  4953              LDR      r1,|L1.1024|
0002b2  6108              STR      r0,[r1,#0x10]
0002b4  e006              B        |L1.708|
                  |L1.694|
;;;837        }
;;;838        else
;;;839        {
;;;840          /* Disable the PG Bit */
;;;841          FLASH->CR &= CR_PG_Reset;
0002b6  4852              LDR      r0,|L1.1024|
0002b8  6900              LDR      r0,[r0,#0x10]
0002ba  f64171fe          MOV      r1,#0x1ffe
0002be  4008              ANDS     r0,r0,r1
0002c0  494f              LDR      r1,|L1.1024|
0002c2  6108              STR      r0,[r1,#0x10]
                  |L1.708|
;;;842        }
;;;843      }         
;;;844    #endif /* STM32F10X_XL */
;;;845       
;;;846      /* Return the Program Status */
;;;847      return status;
0002c4  4630              MOV      r0,r6
;;;848    }
0002c6  bdf0              POP      {r4-r7,pc}
;;;849    
                          ENDP

                  FLASH_ProgramHalfWord PROC
;;;857      */
;;;858    FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
0002c8  b570              PUSH     {r4-r6,lr}
;;;859    {
0002ca  4604              MOV      r4,r0
0002cc  460d              MOV      r5,r1
;;;860      FLASH_Status status = FLASH_COMPLETE;
0002ce  2604              MOVS     r6,#4
;;;861      /* Check the parameters */
;;;862      assert_param(IS_FLASH_ADDRESS(Address));
;;;863    
;;;864    #ifdef STM32F10X_XL
;;;865      /* Wait for last operation to be completed */
;;;866      status = FLASH_WaitForLastOperation(ProgramTimeout);
;;;867      
;;;868      if(Address < FLASH_BANK1_END_ADDRESS)
;;;869      {
;;;870        if(status == FLASH_COMPLETE)
;;;871        {
;;;872          /* if the previous operation is completed, proceed to program the new data */
;;;873          FLASH->CR |= CR_PG_Set;
;;;874      
;;;875          *(__IO uint16_t*)Address = Data;
;;;876          /* Wait for last operation to be completed */
;;;877          status = FLASH_WaitForLastBank1Operation(ProgramTimeout);
;;;878    
;;;879          /* Disable the PG Bit */
;;;880          FLASH->CR &= CR_PG_Reset;
;;;881        }
;;;882      }
;;;883      else
;;;884      {
;;;885        if(status == FLASH_COMPLETE)
;;;886        {
;;;887          /* if the previous operation is completed, proceed to program the new data */
;;;888          FLASH->CR2 |= CR_PG_Set;
;;;889      
;;;890          *(__IO uint16_t*)Address = Data;
;;;891          /* Wait for last operation to be completed */
;;;892          status = FLASH_WaitForLastBank2Operation(ProgramTimeout);
;;;893    
;;;894          /* Disable the PG Bit */
;;;895          FLASH->CR2 &= CR_PG_Reset;
;;;896        }
;;;897      }
;;;898    #else
;;;899      /* Wait for last operation to be completed */
;;;900      status = FLASH_WaitForLastOperation(ProgramTimeout);
0002d0  02f0              LSLS     r0,r6,#11
0002d2  f7fffffe          BL       FLASH_WaitForLastOperation
0002d6  4606              MOV      r6,r0
;;;901      
;;;902      if(status == FLASH_COMPLETE)
0002d8  2e04              CMP      r6,#4
0002da  d111              BNE      |L1.768|
;;;903      {
;;;904        /* if the previous operation is completed, proceed to program the new data */
;;;905        FLASH->CR |= CR_PG_Set;
0002dc  4848              LDR      r0,|L1.1024|
0002de  6900              LDR      r0,[r0,#0x10]
0002e0  f0400001          ORR      r0,r0,#1
0002e4  4946              LDR      r1,|L1.1024|
0002e6  6108              STR      r0,[r1,#0x10]
;;;906      
;;;907        *(__IO uint16_t*)Address = Data;
0002e8  8025              STRH     r5,[r4,#0]
;;;908        /* Wait for last operation to be completed */
;;;909        status = FLASH_WaitForLastOperation(ProgramTimeout);
0002ea  02f0              LSLS     r0,r6,#11
0002ec  f7fffffe          BL       FLASH_WaitForLastOperation
0002f0  4606              MOV      r6,r0
;;;910        
;;;911        /* Disable the PG Bit */
;;;912        FLASH->CR &= CR_PG_Reset;
0002f2  4843              LDR      r0,|L1.1024|
0002f4  6900              LDR      r0,[r0,#0x10]
0002f6  f64171fe          MOV      r1,#0x1ffe
0002fa  4008              ANDS     r0,r0,r1
0002fc  4940              LDR      r1,|L1.1024|
0002fe  6108              STR      r0,[r1,#0x10]
                  |L1.768|
;;;913      } 
;;;914    #endif  /* STM32F10X_XL */
;;;915      
;;;916      /* Return the Program Status */
;;;917      return status;
000300  4630              MOV      r0,r6
;;;918    }
000302  bd70              POP      {r4-r6,pc}
;;;919    
                          ENDP

                  FLASH_ProgramOptionByteData PROC
;;;928      */
;;;929    FLASH_Status FLASH_ProgramOptionByteData(uint32_t Address, uint8_t Data)
000304  b570              PUSH     {r4-r6,lr}
;;;930    {
000306  4605              MOV      r5,r0
000308  460e              MOV      r6,r1
;;;931      FLASH_Status status = FLASH_COMPLETE;
00030a  2404              MOVS     r4,#4
;;;932      /* Check the parameters */
;;;933      assert_param(IS_OB_DATA_ADDRESS(Address));
;;;934      status = FLASH_WaitForLastOperation(ProgramTimeout);
00030c  02e0              LSLS     r0,r4,#11
00030e  f7fffffe          BL       FLASH_WaitForLastOperation
000312  4604              MOV      r4,r0
;;;935    
;;;936      if(status == FLASH_COMPLETE)
000314  2c04              CMP      r4,#4
000316  d117              BNE      |L1.840|
;;;937      {
;;;938        /* Authorize the small information block programming */
;;;939        FLASH->OPTKEYR = FLASH_KEY1;
000318  483a              LDR      r0,|L1.1028|
00031a  4939              LDR      r1,|L1.1024|
00031c  6088              STR      r0,[r1,#8]
;;;940        FLASH->OPTKEYR = FLASH_KEY2;
00031e  483a              LDR      r0,|L1.1032|
000320  6088              STR      r0,[r1,#8]
;;;941        /* Enables the Option Bytes Programming operation */
;;;942        FLASH->CR |= CR_OPTPG_Set; 
000322  4608              MOV      r0,r1
000324  6900              LDR      r0,[r0,#0x10]
000326  f0400010          ORR      r0,r0,#0x10
00032a  6108              STR      r0,[r1,#0x10]
;;;943        *(__IO uint16_t*)Address = Data;
00032c  802e              STRH     r6,[r5,#0]
;;;944        
;;;945        /* Wait for last operation to be completed */
;;;946        status = FLASH_WaitForLastOperation(ProgramTimeout);
00032e  02e0              LSLS     r0,r4,#11
000330  f7fffffe          BL       FLASH_WaitForLastOperation
000334  4604              MOV      r4,r0
;;;947        if(status != FLASH_TIMEOUT)
000336  2c05              CMP      r4,#5
000338  d006              BEQ      |L1.840|
;;;948        {
;;;949          /* if the program operation is completed, disable the OPTPG Bit */
;;;950          FLASH->CR &= CR_OPTPG_Reset;
00033a  4831              LDR      r0,|L1.1024|
00033c  6900              LDR      r0,[r0,#0x10]
00033e  f64171ef          MOV      r1,#0x1fef
000342  4008              ANDS     r0,r0,r1
000344  492e              LDR      r1,|L1.1024|
000346  6108              STR      r0,[r1,#0x10]
                  |L1.840|
;;;951        }
;;;952      }
;;;953      /* Return the Option Byte Data Program Status */
;;;954      return status;
000348  4620              MOV      r0,r4
;;;955    }
00034a  bd70              POP      {r4-r6,pc}
;;;956    
                          ENDP

                  FLASH_EnableWriteProtection PROC
;;;974      */
;;;975    FLASH_Status FLASH_EnableWriteProtection(uint32_t FLASH_Pages)
00034c  e92d43f0          PUSH     {r4-r9,lr}
;;;976    {
000350  4604              MOV      r4,r0
;;;977      uint16_t WRP0_Data = 0xFFFF, WRP1_Data = 0xFFFF, WRP2_Data = 0xFFFF, WRP3_Data = 0xFFFF;
000352  f64f76ff          MOV      r6,#0xffff
000356  4637              MOV      r7,r6
000358  46b0              MOV      r8,r6
00035a  46b1              MOV      r9,r6
;;;978      
;;;979      FLASH_Status status = FLASH_COMPLETE;
00035c  2504              MOVS     r5,#4
;;;980      
;;;981      /* Check the parameters */
;;;982      assert_param(IS_FLASH_WRPROT_PAGE(FLASH_Pages));
;;;983      
;;;984      FLASH_Pages = (uint32_t)(~FLASH_Pages);
00035e  43e4              MVNS     r4,r4
;;;985      WRP0_Data = (uint16_t)(FLASH_Pages & WRP0_Mask);
000360  b2e6              UXTB     r6,r4
;;;986      WRP1_Data = (uint16_t)((FLASH_Pages & WRP1_Mask) >> 8);
000362  f3c42707          UBFX     r7,r4,#8,#8
;;;987      WRP2_Data = (uint16_t)((FLASH_Pages & WRP2_Mask) >> 16);
000366  f3c44807          UBFX     r8,r4,#16,#8
;;;988      WRP3_Data = (uint16_t)((FLASH_Pages & WRP3_Mask) >> 24);
00036a  ea4f6914          LSR      r9,r4,#24
;;;989      
;;;990      /* Wait for last operation to be completed */
;;;991      status = FLASH_WaitForLastOperation(ProgramTimeout);
00036e  02e8              LSLS     r0,r5,#11
000370  f7fffffe          BL       FLASH_WaitForLastOperation
000374  4605              MOV      r5,r0
;;;992      
;;;993      if(status == FLASH_COMPLETE)
000376  2d04              CMP      r5,#4
000378  d140              BNE      |L1.1020|
;;;994      {
;;;995        /* Authorizes the small information block programming */
;;;996        FLASH->OPTKEYR = FLASH_KEY1;
00037a  4822              LDR      r0,|L1.1028|
00037c  4920              LDR      r1,|L1.1024|
00037e  6088              STR      r0,[r1,#8]
;;;997        FLASH->OPTKEYR = FLASH_KEY2;
000380  4821              LDR      r0,|L1.1032|
000382  6088              STR      r0,[r1,#8]
;;;998        FLASH->CR |= CR_OPTPG_Set;
000384  4608              MOV      r0,r1
000386  6900              LDR      r0,[r0,#0x10]
000388  f0400010          ORR      r0,r0,#0x10
00038c  6108              STR      r0,[r1,#0x10]
;;;999        if(WRP0_Data != 0xFF)
00038e  2eff              CMP      r6,#0xff
000390  d006              BEQ      |L1.928|
;;;1000       {
;;;1001         OB->WRP0 = WRP0_Data;
000392  481e              LDR      r0,|L1.1036|
000394  3008              ADDS     r0,r0,#8
000396  8006              STRH     r6,[r0,#0]
;;;1002         
;;;1003         /* Wait for last operation to be completed */
;;;1004         status = FLASH_WaitForLastOperation(ProgramTimeout);
000398  02e8              LSLS     r0,r5,#11
00039a  f7fffffe          BL       FLASH_WaitForLastOperation
00039e  4605              MOV      r5,r0
                  |L1.928|
;;;1005       }
;;;1006       if((status == FLASH_COMPLETE) && (WRP1_Data != 0xFF))
0003a0  2d04              CMP      r5,#4
0003a2  d108              BNE      |L1.950|
0003a4  2fff              CMP      r7,#0xff
0003a6  d006              BEQ      |L1.950|
;;;1007       {
;;;1008         OB->WRP1 = WRP1_Data;
0003a8  4818              LDR      r0,|L1.1036|
0003aa  300a              ADDS     r0,r0,#0xa
0003ac  8007              STRH     r7,[r0,#0]
;;;1009         
;;;1010         /* Wait for last operation to be completed */
;;;1011         status = FLASH_WaitForLastOperation(ProgramTimeout);
0003ae  02e8              LSLS     r0,r5,#11
0003b0  f7fffffe          BL       FLASH_WaitForLastOperation
0003b4  4605              MOV      r5,r0
                  |L1.950|
;;;1012       }
;;;1013       if((status == FLASH_COMPLETE) && (WRP2_Data != 0xFF))
0003b6  2d04              CMP      r5,#4
0003b8  d10a              BNE      |L1.976|
0003ba  f1b80fff          CMP      r8,#0xff
0003be  d007              BEQ      |L1.976|
;;;1014       {
;;;1015         OB->WRP2 = WRP2_Data;
0003c0  4812              LDR      r0,|L1.1036|
0003c2  300c              ADDS     r0,r0,#0xc
0003c4  f8a08000          STRH     r8,[r0,#0]
;;;1016         
;;;1017         /* Wait for last operation to be completed */
;;;1018         status = FLASH_WaitForLastOperation(ProgramTimeout);
0003c8  02e8              LSLS     r0,r5,#11
0003ca  f7fffffe          BL       FLASH_WaitForLastOperation
0003ce  4605              MOV      r5,r0
                  |L1.976|
;;;1019       }
;;;1020       
;;;1021       if((status == FLASH_COMPLETE)&& (WRP3_Data != 0xFF))
0003d0  2d04              CMP      r5,#4
0003d2  d10a              BNE      |L1.1002|
0003d4  f1b90fff          CMP      r9,#0xff
0003d8  d007              BEQ      |L1.1002|
;;;1022       {
;;;1023         OB->WRP3 = WRP3_Data;
0003da  480c              LDR      r0,|L1.1036|
0003dc  300e              ADDS     r0,r0,#0xe
0003de  f8a09000          STRH     r9,[r0,#0]
;;;1024        
;;;1025         /* Wait for last operation to be completed */
;;;1026         status = FLASH_WaitForLastOperation(ProgramTimeout);
0003e2  02e8              LSLS     r0,r5,#11
0003e4  f7fffffe          BL       FLASH_WaitForLastOperation
0003e8  4605              MOV      r5,r0
                  |L1.1002|
;;;1027       }
;;;1028             
;;;1029       if(status != FLASH_TIMEOUT)
0003ea  2d05              CMP      r5,#5
0003ec  d006              BEQ      |L1.1020|
;;;1030       {
;;;1031         /* if the program operation is completed, disable the OPTPG Bit */
;;;1032         FLASH->CR &= CR_OPTPG_Reset;
0003ee  4804              LDR      r0,|L1.1024|
0003f0  6900              LDR      r0,[r0,#0x10]
0003f2  f64171ef          MOV      r1,#0x1fef
0003f6  4008              ANDS     r0,r0,r1
0003f8  4901              LDR      r1,|L1.1024|
0003fa  6108              STR      r0,[r1,#0x10]
                  |L1.1020|
;;;1033       }
;;;1034     } 
;;;1035     /* Return the write protection operation Status */
;;;1036     return status;       
0003fc  4628              MOV      r0,r5
;;;1037   }
0003fe  e007              B        |L1.1040|
                  |L1.1024|
                          DCD      0x40022000
                  |L1.1028|
                          DCD      0x45670123
                  |L1.1032|
                          DCD      0xcdef89ab
                  |L1.1036|
                          DCD      0x1ffff800
                  |L1.1040|
000410  e8bd83f0          POP      {r4-r9,pc}
;;;1038   
                          ENDP

                  FLASH_ReadOutProtection PROC
;;;1048     */
;;;1049   FLASH_Status FLASH_ReadOutProtection(FunctionalState NewState)
000414  b530              PUSH     {r4,r5,lr}
;;;1050   {
000416  4605              MOV      r5,r0
;;;1051     FLASH_Status status = FLASH_COMPLETE;
000418  2404              MOVS     r4,#4
;;;1052     /* Check the parameters */
;;;1053     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1054     status = FLASH_WaitForLastOperation(EraseTimeout);
00041a  f44f2030          MOV      r0,#0xb0000
00041e  f7fffffe          BL       FLASH_WaitForLastOperation
000422  4604              MOV      r4,r0
;;;1055     if(status == FLASH_COMPLETE)
000424  2c04              CMP      r4,#4
000426  d141              BNE      |L1.1196|
;;;1056     {
;;;1057       /* Authorizes the small information block programming */
;;;1058       FLASH->OPTKEYR = FLASH_KEY1;
000428  485e              LDR      r0,|L1.1444|
00042a  495f              LDR      r1,|L1.1448|
00042c  6088              STR      r0,[r1,#8]
;;;1059       FLASH->OPTKEYR = FLASH_KEY2;
00042e  485f              LDR      r0,|L1.1452|
000430  6088              STR      r0,[r1,#8]
;;;1060       FLASH->CR |= CR_OPTER_Set;
000432  4608              MOV      r0,r1
000434  6900              LDR      r0,[r0,#0x10]
000436  f0400020          ORR      r0,r0,#0x20
00043a  6108              STR      r0,[r1,#0x10]
;;;1061       FLASH->CR |= CR_STRT_Set;
00043c  4608              MOV      r0,r1
00043e  6900              LDR      r0,[r0,#0x10]
000440  f0400040          ORR      r0,r0,#0x40
000444  6108              STR      r0,[r1,#0x10]
;;;1062       /* Wait for last operation to be completed */
;;;1063       status = FLASH_WaitForLastOperation(EraseTimeout);
000446  f44f2030          MOV      r0,#0xb0000
00044a  f7fffffe          BL       FLASH_WaitForLastOperation
00044e  4604              MOV      r4,r0
;;;1064       if(status == FLASH_COMPLETE)
000450  2c04              CMP      r4,#4
000452  d122              BNE      |L1.1178|
;;;1065       {
;;;1066         /* if the erase operation is completed, disable the OPTER Bit */
;;;1067         FLASH->CR &= CR_OPTER_Reset;
000454  4854              LDR      r0,|L1.1448|
000456  6900              LDR      r0,[r0,#0x10]
000458  f64171df          MOV      r1,#0x1fdf
00045c  4008              ANDS     r0,r0,r1
00045e  4952              LDR      r1,|L1.1448|
000460  6108              STR      r0,[r1,#0x10]
;;;1068         /* Enable the Option Bytes Programming operation */
;;;1069         FLASH->CR |= CR_OPTPG_Set; 
000462  4608              MOV      r0,r1
000464  6900              LDR      r0,[r0,#0x10]
000466  f0400010          ORR      r0,r0,#0x10
00046a  6108              STR      r0,[r1,#0x10]
;;;1070         if(NewState != DISABLE)
00046c  b11d              CBZ      r5,|L1.1142|
;;;1071         {
;;;1072           OB->RDP = 0x00;
00046e  2000              MOVS     r0,#0
000470  494f              LDR      r1,|L1.1456|
000472  8008              STRH     r0,[r1,#0]
000474  e002              B        |L1.1148|
                  |L1.1142|
;;;1073         }
;;;1074         else
;;;1075         {
;;;1076           OB->RDP = RDP_Key;  
000476  20a5              MOVS     r0,#0xa5
000478  494d              LDR      r1,|L1.1456|
00047a  8008              STRH     r0,[r1,#0]
                  |L1.1148|
;;;1077         }
;;;1078         /* Wait for last operation to be completed */
;;;1079         status = FLASH_WaitForLastOperation(EraseTimeout); 
00047c  f44f2030          MOV      r0,#0xb0000
000480  f7fffffe          BL       FLASH_WaitForLastOperation
000484  4604              MOV      r4,r0
;;;1080       
;;;1081         if(status != FLASH_TIMEOUT)
000486  2c05              CMP      r4,#5
000488  d010              BEQ      |L1.1196|
;;;1082         {
;;;1083           /* if the program operation is completed, disable the OPTPG Bit */
;;;1084           FLASH->CR &= CR_OPTPG_Reset;
00048a  4847              LDR      r0,|L1.1448|
00048c  6900              LDR      r0,[r0,#0x10]
00048e  f64171ef          MOV      r1,#0x1fef
000492  4008              ANDS     r0,r0,r1
000494  4944              LDR      r1,|L1.1448|
000496  6108              STR      r0,[r1,#0x10]
000498  e008              B        |L1.1196|
                  |L1.1178|
;;;1085         }
;;;1086       }
;;;1087       else 
;;;1088       {
;;;1089         if(status != FLASH_TIMEOUT)
00049a  2c05              CMP      r4,#5
00049c  d006              BEQ      |L1.1196|
;;;1090         {
;;;1091           /* Disable the OPTER Bit */
;;;1092           FLASH->CR &= CR_OPTER_Reset;
00049e  4842              LDR      r0,|L1.1448|
0004a0  6900              LDR      r0,[r0,#0x10]
0004a2  f64171df          MOV      r1,#0x1fdf
0004a6  4008              ANDS     r0,r0,r1
0004a8  493f              LDR      r1,|L1.1448|
0004aa  6108              STR      r0,[r1,#0x10]
                  |L1.1196|
;;;1093         }
;;;1094       }
;;;1095     }
;;;1096     /* Return the protection operation Status */
;;;1097     return status;       
0004ac  4620              MOV      r0,r4
;;;1098   }
0004ae  bd30              POP      {r4,r5,pc}
;;;1099   
                          ENDP

                  FLASH_UserOptionByteConfig PROC
;;;1117     */
;;;1118   FLASH_Status FLASH_UserOptionByteConfig(uint16_t OB_IWDG, uint16_t OB_STOP, uint16_t OB_STDBY)
0004b0  b5f0              PUSH     {r4-r7,lr}
;;;1119   {
0004b2  4605              MOV      r5,r0
0004b4  460e              MOV      r6,r1
0004b6  4617              MOV      r7,r2
;;;1120     FLASH_Status status = FLASH_COMPLETE; 
0004b8  2404              MOVS     r4,#4
;;;1121   
;;;1122     /* Check the parameters */
;;;1123     assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
;;;1124     assert_param(IS_OB_STOP_SOURCE(OB_STOP));
;;;1125     assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));
;;;1126   
;;;1127     /* Authorize the small information block programming */
;;;1128     FLASH->OPTKEYR = FLASH_KEY1;
0004ba  483a              LDR      r0,|L1.1444|
0004bc  493a              LDR      r1,|L1.1448|
0004be  6088              STR      r0,[r1,#8]
;;;1129     FLASH->OPTKEYR = FLASH_KEY2;
0004c0  483a              LDR      r0,|L1.1452|
0004c2  6088              STR      r0,[r1,#8]
;;;1130     
;;;1131     /* Wait for last operation to be completed */
;;;1132     status = FLASH_WaitForLastOperation(ProgramTimeout);
0004c4  02e0              LSLS     r0,r4,#11
0004c6  f7fffffe          BL       FLASH_WaitForLastOperation
0004ca  4604              MOV      r4,r0
;;;1133     
;;;1134     if(status == FLASH_COMPLETE)
0004cc  2c04              CMP      r4,#4
0004ce  d119              BNE      |L1.1284|
;;;1135     {  
;;;1136       /* Enable the Option Bytes Programming operation */
;;;1137       FLASH->CR |= CR_OPTPG_Set; 
0004d0  4835              LDR      r0,|L1.1448|
0004d2  6900              LDR      r0,[r0,#0x10]
0004d4  f0400010          ORR      r0,r0,#0x10
0004d8  4933              LDR      r1,|L1.1448|
0004da  6108              STR      r0,[r1,#0x10]
;;;1138              
;;;1139       OB->USER = OB_IWDG | (uint16_t)(OB_STOP | (uint16_t)(OB_STDBY | ((uint16_t)0xF8))); 
0004dc  f04700f8          ORR      r0,r7,#0xf8
0004e0  4330              ORRS     r0,r0,r6
0004e2  4328              ORRS     r0,r0,r5
0004e4  4932              LDR      r1,|L1.1456|
0004e6  1c89              ADDS     r1,r1,#2
0004e8  8008              STRH     r0,[r1,#0]
;;;1140     
;;;1141       /* Wait for last operation to be completed */
;;;1142       status = FLASH_WaitForLastOperation(ProgramTimeout);
0004ea  02e0              LSLS     r0,r4,#11
0004ec  f7fffffe          BL       FLASH_WaitForLastOperation
0004f0  4604              MOV      r4,r0
;;;1143       if(status != FLASH_TIMEOUT)
0004f2  2c05              CMP      r4,#5
0004f4  d006              BEQ      |L1.1284|
;;;1144       {
;;;1145         /* if the program operation is completed, disable the OPTPG Bit */
;;;1146         FLASH->CR &= CR_OPTPG_Reset;
0004f6  482c              LDR      r0,|L1.1448|
0004f8  6900              LDR      r0,[r0,#0x10]
0004fa  f64171ef          MOV      r1,#0x1fef
0004fe  4008              ANDS     r0,r0,r1
000500  4929              LDR      r1,|L1.1448|
000502  6108              STR      r0,[r1,#0x10]
                  |L1.1284|
;;;1147       }
;;;1148     }    
;;;1149     /* Return the Option Byte program Status */
;;;1150     return status;
000504  4620              MOV      r0,r4
;;;1151   }
000506  bdf0              POP      {r4-r7,pc}
;;;1152   
                          ENDP

                  FLASH_GetUserOptionByte PROC
;;;1215     */
;;;1216   uint32_t FLASH_GetUserOptionByte(void)
000508  4827              LDR      r0,|L1.1448|
;;;1217   {
;;;1218     /* Return the User Option Byte */
;;;1219     return (uint32_t)(FLASH->OBR >> 2);
00050a  69c0              LDR      r0,[r0,#0x1c]
00050c  0880              LSRS     r0,r0,#2
;;;1220   }
00050e  4770              BX       lr
;;;1221   
                          ENDP

                  FLASH_GetWriteProtectionOptionByte PROC
;;;1227     */
;;;1228   uint32_t FLASH_GetWriteProtectionOptionByte(void)
000510  4825              LDR      r0,|L1.1448|
;;;1229   {
;;;1230     /* Return the Flash write protection Register value */
;;;1231     return (uint32_t)(FLASH->WRPR);
000512  6a00              LDR      r0,[r0,#0x20]
;;;1232   }
000514  4770              BX       lr
;;;1233   
                          ENDP

                  FLASH_GetPrefetchBufferStatus PROC
;;;1259     */
;;;1260   FlagStatus FLASH_GetPrefetchBufferStatus(void)
000516  2000              MOVS     r0,#0
;;;1261   {
;;;1262     FlagStatus bitstatus = RESET;
;;;1263     
;;;1264     if ((FLASH->ACR & ACR_PRFTBS_Mask) != (uint32_t)RESET)
000518  4923              LDR      r1,|L1.1448|
00051a  6809              LDR      r1,[r1,#0]
00051c  f0110f20          TST      r1,#0x20
000520  d001              BEQ      |L1.1318|
;;;1265     {
;;;1266       bitstatus = SET;
000522  2001              MOVS     r0,#1
000524  e000              B        |L1.1320|
                  |L1.1318|
;;;1267     }
;;;1268     else
;;;1269     {
;;;1270       bitstatus = RESET;
000526  2000              MOVS     r0,#0
                  |L1.1320|
;;;1271     }
;;;1272     /* Return the new state of FLASH Prefetch Buffer Status (SET or RESET) */
;;;1273     return bitstatus; 
;;;1274   }
000528  4770              BX       lr
;;;1275   
                          ENDP

                  FLASH_ITConfig PROC
;;;1289     */
;;;1290   void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
00052a  b129              CBZ      r1,|L1.1336|
;;;1291   {
;;;1292   #ifdef STM32F10X_XL
;;;1293     /* Check the parameters */
;;;1294     assert_param(IS_FLASH_IT(FLASH_IT)); 
;;;1295     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1296   
;;;1297     if((FLASH_IT & 0x80000000) != 0x0)
;;;1298     {
;;;1299       if(NewState != DISABLE)
;;;1300       {
;;;1301         /* Enable the interrupt sources */
;;;1302         FLASH->CR2 |= (FLASH_IT & 0x7FFFFFFF);
;;;1303       }
;;;1304       else
;;;1305       {
;;;1306         /* Disable the interrupt sources */
;;;1307         FLASH->CR2 &= ~(uint32_t)(FLASH_IT & 0x7FFFFFFF);
;;;1308       }
;;;1309     }
;;;1310     else
;;;1311     {
;;;1312       if(NewState != DISABLE)
;;;1313       {
;;;1314         /* Enable the interrupt sources */
;;;1315         FLASH->CR |= FLASH_IT;
;;;1316       }
;;;1317       else
;;;1318       {
;;;1319         /* Disable the interrupt sources */
;;;1320         FLASH->CR &= ~(uint32_t)FLASH_IT;
;;;1321       }
;;;1322     }
;;;1323   #else
;;;1324     /* Check the parameters */
;;;1325     assert_param(IS_FLASH_IT(FLASH_IT)); 
;;;1326     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1327   
;;;1328     if(NewState != DISABLE)
;;;1329     {
;;;1330       /* Enable the interrupt sources */
;;;1331       FLASH->CR |= FLASH_IT;
00052c  4a1e              LDR      r2,|L1.1448|
00052e  6912              LDR      r2,[r2,#0x10]
000530  4302              ORRS     r2,r2,r0
000532  4b1d              LDR      r3,|L1.1448|
000534  611a              STR      r2,[r3,#0x10]
000536  e004              B        |L1.1346|
                  |L1.1336|
;;;1332     }
;;;1333     else
;;;1334     {
;;;1335       /* Disable the interrupt sources */
;;;1336       FLASH->CR &= ~(uint32_t)FLASH_IT;
000538  4a1b              LDR      r2,|L1.1448|
00053a  6912              LDR      r2,[r2,#0x10]
00053c  4382              BICS     r2,r2,r0
00053e  4b1a              LDR      r3,|L1.1448|
000540  611a              STR      r2,[r3,#0x10]
                  |L1.1346|
;;;1337     }
;;;1338   #endif /* STM32F10X_XL */
;;;1339   }
000542  4770              BX       lr
;;;1340   
                          ENDP

                  FLASH_GetFlagStatus PROC
;;;1356     */
;;;1357   FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
000544  4601              MOV      r1,r0
;;;1358   {
;;;1359     FlagStatus bitstatus = RESET;
000546  2000              MOVS     r0,#0
;;;1360   
;;;1361   #ifdef STM32F10X_XL
;;;1362     /* Check the parameters */
;;;1363     assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG)) ;
;;;1364     if(FLASH_FLAG == FLASH_FLAG_OPTERR) 
;;;1365     {
;;;1366       if((FLASH->OBR & FLASH_FLAG_OPTERR) != (uint32_t)RESET)
;;;1367       {
;;;1368         bitstatus = SET;
;;;1369       }
;;;1370       else
;;;1371       {
;;;1372         bitstatus = RESET;
;;;1373       }
;;;1374     }
;;;1375     else
;;;1376     {
;;;1377       if((FLASH_FLAG & 0x80000000) != 0x0)
;;;1378       {
;;;1379         if((FLASH->SR2 & FLASH_FLAG) != (uint32_t)RESET)
;;;1380         {
;;;1381           bitstatus = SET;
;;;1382         }
;;;1383         else
;;;1384         {
;;;1385           bitstatus = RESET;
;;;1386         }
;;;1387       }
;;;1388       else
;;;1389       {
;;;1390         if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
;;;1391         {
;;;1392           bitstatus = SET;
;;;1393         }
;;;1394         else
;;;1395         {
;;;1396           bitstatus = RESET;
;;;1397         }
;;;1398       }
;;;1399     }
;;;1400   #else
;;;1401     /* Check the parameters */
;;;1402     assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG)) ;
;;;1403     if(FLASH_FLAG == FLASH_FLAG_OPTERR) 
000548  2901              CMP      r1,#1
00054a  d108              BNE      |L1.1374|
;;;1404     {
;;;1405       if((FLASH->OBR & FLASH_FLAG_OPTERR) != (uint32_t)RESET)
00054c  4a16              LDR      r2,|L1.1448|
00054e  69d2              LDR      r2,[r2,#0x1c]
000550  f0120f01          TST      r2,#1
000554  d001              BEQ      |L1.1370|
;;;1406       {
;;;1407         bitstatus = SET;
000556  2001              MOVS     r0,#1
000558  e008              B        |L1.1388|
                  |L1.1370|
;;;1408       }
;;;1409       else
;;;1410       {
;;;1411         bitstatus = RESET;
00055a  2000              MOVS     r0,#0
00055c  e006              B        |L1.1388|
                  |L1.1374|
;;;1412       }
;;;1413     }
;;;1414     else
;;;1415     {
;;;1416      if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
00055e  4a12              LDR      r2,|L1.1448|
000560  68d2              LDR      r2,[r2,#0xc]
000562  420a              TST      r2,r1
000564  d001              BEQ      |L1.1386|
;;;1417       {
;;;1418         bitstatus = SET;
000566  2001              MOVS     r0,#1
000568  e000              B        |L1.1388|
                  |L1.1386|
;;;1419       }
;;;1420       else
;;;1421       {
;;;1422         bitstatus = RESET;
00056a  2000              MOVS     r0,#0
                  |L1.1388|
;;;1423       }
;;;1424     }
;;;1425   #endif /* STM32F10X_XL */
;;;1426   
;;;1427     /* Return the new state of FLASH_FLAG (SET or RESET) */
;;;1428     return bitstatus;
;;;1429   }
00056c  4770              BX       lr
;;;1430   
                          ENDP

                  FLASH_ClearFlag PROC
;;;1442     */
;;;1443   void FLASH_ClearFlag(uint32_t FLASH_FLAG)
00056e  490e              LDR      r1,|L1.1448|
;;;1444   {
;;;1445   #ifdef STM32F10X_XL
;;;1446     /* Check the parameters */
;;;1447     assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
;;;1448   
;;;1449     if((FLASH_FLAG & 0x80000000) != 0x0)
;;;1450     {
;;;1451       /* Clear the flags */
;;;1452       FLASH->SR2 = FLASH_FLAG;
;;;1453     }
;;;1454     else
;;;1455     {
;;;1456       /* Clear the flags */
;;;1457       FLASH->SR = FLASH_FLAG;
;;;1458     }  
;;;1459   
;;;1460   #else
;;;1461     /* Check the parameters */
;;;1462     assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG)) ;
;;;1463     
;;;1464     /* Clear the flags */
;;;1465     FLASH->SR = FLASH_FLAG;
000570  60c8              STR      r0,[r1,#0xc]
;;;1466   #endif /* STM32F10X_XL */
;;;1467   }
000572  4770              BX       lr
;;;1468   
                          ENDP

                  FLASH_GetStatus PROC
;;;1476     */
;;;1477   FLASH_Status FLASH_GetStatus(void)
000574  2004              MOVS     r0,#4
;;;1478   {
;;;1479     FLASH_Status flashstatus = FLASH_COMPLETE;
;;;1480     
;;;1481     if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
000576  490c              LDR      r1,|L1.1448|
000578  68c9              LDR      r1,[r1,#0xc]
00057a  f0110f01          TST      r1,#1
00057e  d001              BEQ      |L1.1412|
;;;1482     {
;;;1483       flashstatus = FLASH_BUSY;
000580  2001              MOVS     r0,#1
000582  e00e              B        |L1.1442|
                  |L1.1412|
;;;1484     }
;;;1485     else 
;;;1486     {  
;;;1487       if((FLASH->SR & FLASH_FLAG_PGERR) != 0)
000584  4908              LDR      r1,|L1.1448|
000586  68c9              LDR      r1,[r1,#0xc]
000588  f0110f04          TST      r1,#4
00058c  d001              BEQ      |L1.1426|
;;;1488       { 
;;;1489         flashstatus = FLASH_ERROR_PG;
00058e  2002              MOVS     r0,#2
000590  e007              B        |L1.1442|
                  |L1.1426|
;;;1490       }
;;;1491       else 
;;;1492       {
;;;1493         if((FLASH->SR & FLASH_FLAG_WRPRTERR) != 0 )
000592  4905              LDR      r1,|L1.1448|
000594  68c9              LDR      r1,[r1,#0xc]
000596  f0110f10          TST      r1,#0x10
00059a  d001              BEQ      |L1.1440|
;;;1494         {
;;;1495           flashstatus = FLASH_ERROR_WRP;
00059c  2003              MOVS     r0,#3
00059e  e000              B        |L1.1442|
                  |L1.1440|
;;;1496         }
;;;1497         else
;;;1498         {
;;;1499           flashstatus = FLASH_COMPLETE;
0005a0  2004              MOVS     r0,#4
                  |L1.1442|
;;;1500         }
;;;1501       }
;;;1502     }
;;;1503     /* Return the Flash Status */
;;;1504     return flashstatus;
;;;1505   }
0005a2  4770              BX       lr
;;;1506   
                          ENDP

                  |L1.1444|
                          DCD      0x45670123
                  |L1.1448|
                          DCD      0x40022000
                  |L1.1452|
                          DCD      0xcdef89ab
                  |L1.1456|
                          DCD      0x1ffff800
